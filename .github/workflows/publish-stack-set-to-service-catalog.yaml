name: Publish Stack Set and stack instances
# On a relase via manual execution this workflow will 
# Synth the CloudFormation templates from the typescript cdk run jests tests
# against the resultant files and confirm they contain the expected resources.
# Deploy the new stack instance to accounts where an instance already exists

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.16.0'
      - name: Install node dependencies
        run: npm ci
      - name: Run Jest Tests
        run: npm test

  validate:
    runs-on: ubuntu-latest
    needs: 
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: cdk synth
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: 'synth'
          cdk_version: '2.83.1'
          working_dir: 'cdk.out'
          cdk_stack: DynatraceMonitoringRoleStack
          actions_comment: false
      - name: Run Checkov action
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: cdk.out/
          framework: cloudformation
          skip_check: CKV_AWS_107,CKV_AWS_111

  update:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: 
      - validate
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.DT_GH_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-2
          role-duration-seconds: 7200
      - name: Search latest hardened AMI
        id: hardened-ami
        run: |
          LATEST-AMI=$(aws ec2 describe-images \
          --owners aws-marketplace \
          --filters 'Name=name,Values=*'${PRODUCT_ID}'*' \
          --query 'Images[*].[ImageId,CreationDate]' --output text | sort -k2 -r | head -n1 | awk '{ print $1 }')
          echo "amiId=$LATEST_AMI" >> $GITHUB_OUTPUT
        env:
          AWS_DEFAULT_REGION: eu-west-2
          PRODUCT_ID: "c41d38c4-3f6a-4434-9a86-06dd331d3f9c"
      - name: cdk synth
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: 'synth'
          cdk_version: '2.83.1'
          working_dir: 'cdk.out'
          cdk_stack: DynatraceMonitoringRoleStack
          actions_comment: false
        env:
          AMI_ID: ${{ steps.hardened-ami.outputs.amiId }}                  
      - name: Hyphenate Version
        id: hyphenate-version
        run: |
          VERSION=${{ github.event.release.tag_name }}
          RELEASE=$(echo $VERSION | sed s/\\./-/g)
          echo "release=$RELEASE" >> "$GITHUB_OUTPUT"
      - name: Get previous stackset
        id: previous_stack_set
        run: |
          PREVIOUS=$(aws cloudformation list-stack-sets --status ACTIVE --query "Summaries[*].StackSetName" | \
          grep di-devplat-obv-dynatrace-iam | sed -e 's/^[ \t]*//' | tr -d '"')
          echo "name=$PREVIOUS" >> "$GITHUB_OUTPUT"
        env:
          AWS_DEFAULT_REGION: eu-west-2
      - name: Account ids
        id: account_ids
        run: |
          ACCOUNT_IDS=074300971915
          # ACCOUNT_IDS=$(aws cloudformation list-stack-instances --stack-set-name ${{ steps.previous_stack_set.outputs.name }} --query "Summaries[*].Account" | jq -c . | sed -e 's/,/ /g' | tr -d '[]')
          echo "ids=$ACCOUNT_IDS" >> "$GITHUB_OUTPUT"
        env:
          AWS_DEFAULT_REGION: eu-west-2
      - name: Create Stack Set and instances
        run: |
          # Create the new stack set
          aws cloudformation create-stack-set --stack-set-name di-devplat-obv-dynatrace-iam-${{ steps.hyphenate-version.outputs.release }} \
          --template-body file://cdk.out/DynatraceMonitoringRoleStack.template.json \
          --description 'Stack set that grants Dynatrace permission to pull metrics' \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --administration-role-arn arn:aws:iam::684469894301:role/AWSCloudFormationStackSetAdministrationRole \
          --execution-role-name AWSCloudFormationStackSetExecutionRole \
          --tags Key=Product,Value='GOV.UK Sign In' Key=System,Value=Observability Key=Environment,Value=production \
          Key=Owner,Value='platform-and-sre-pod@digital.cabinet-office.gov.uk' Key=Service,Value=dynatrace
          
          # Loop over account_id of stack instances
          for account_id in ${{ steps.account_ids.outputs.ids }}; do
            # Delete the old stack instance
            aws cloudformation delete-stack-instances --stack-set-name ${{ steps.previous_stack_set.outputs.name }} --regions eu-west-2 --accounts $account_id --no-retain-stacks
            # Wait for the stack instance to be fully gone
            lines=$(aws cloudformation describe-stack-instance --stack-set-name ${{ steps.previous_stack_set.outputs.name }} --stack-instance-account $account_id --stack-instance-region eu-west-2 | wc -l)
            while [ "$lines" -gt 0 ]
            do
              sleep 3
              lines=$(aws cloudformation describe-stack-instance --stack-set-name ${{ steps.previous_stack_set.outputs.name }} --stack-instance-account $account_id --stack-instance-region eu-west-2 | wc -l)
            done
            # Create the new stack instance using the new stack set
            aws cloudformation create-stack-instances --stack-set-name di-devplat-obv-dynatrace-iam-${{ steps.hyphenate-version.outputs.release }} --regions eu-west-2 --accounts $account_id
            # Make sure creation is complete before moving on
            status=$(aws cloudformation describe-stack-instance --stack-set-name di-devplat-obv-dynatrace-iam-${{ steps.hyphenate-version.outputs.release }} --stack-instance-account $account_id  --stack-instance-region eu-west-2 --query "StackInstance.StackInstanceStatus.DetailedStatus" | tr -d '"')
            while [[ $status != "SUCCEEDED"  ]]
            do
              sleep 3
              status=$(aws cloudformation describe-stack-instance --stack-set-name di-devplat-obv-dynatrace-iam-${{ steps.hyphenate-version.outputs.release }} --stack-instance-account $account_id  --stack-instance-region eu-west-2 --query "StackInstance.StackInstanceStatus.DetailedStatus" | tr -d '"')
            done
          done

          # Delete the old stack set
          aws cloudformation delete-stack-set --stack-set-name ${{ steps.previous_stack_set.outputs.name }}
        env:
          AWS_DEFAULT_REGION: eu-west-2
